//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Prefabs/Player/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""In game"",
            ""id"": ""887f7068-c3bb-457c-af72-bebced30ab2b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a90ff2ee-f70f-476f-96a5-936a438923a2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""db12ac36-cbfb-45d1-8f8b-8a91014774df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""c87c0f67-acc1-4c67-92be-4b093eaf0c37"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""480335ae-ddb4-49c5-b19d-8a38e00b2ac0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""80d81a3d-f0c3-4042-bbc1-b843e33e5245"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pick up left"",
                    ""type"": ""Button"",
                    ""id"": ""1dd4407e-d0e0-4343-a28d-a692b3c1ab48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pick up right"",
                    ""type"": ""Button"",
                    ""id"": ""5e007964-eba9-4f0e-ab03-f5df88b192fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop left"",
                    ""type"": ""Button"",
                    ""id"": ""b82b30f3-d224-4742-acf1-2a64eebae668"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop right"",
                    ""type"": ""Button"",
                    ""id"": ""56af3bbc-d1d1-4906-b5c1-e1c20669dce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use left hand"",
                    ""type"": ""Button"",
                    ""id"": ""2bb37450-769c-467a-aebf-402a9c2c4ee1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use right hand"",
                    ""type"": ""Button"",
                    ""id"": ""210e66ec-a14d-453f-ad32-d459769d5849"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""3686b974-3f70-44e7-8dcd-f6fc11fa2747"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99443dd9-b1de-458d-a03a-ec5dcbf7d643"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bac10bdf-b13e-45ce-b553-f3fb69f1f20d"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""717cd731-ae6d-4224-b5dc-2a61fcce1ca9"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c515249d-f2d6-4707-9fc9-76f15da047dc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41f69c82-7979-4192-a2bd-990f8c1c847e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83405e54-b9be-443c-993c-306a93fe42ac"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick up left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f42ca147-5c97-49ae-be4c-fef192a8c739"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c5843484-85e1-450f-b39b-6564fc992d71"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03bf3b46-244e-4522-aa02-a3c2a6e2176b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""79a0e776-27db-40ef-9783-9009cb9a5dbf"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fd22e48e-c376-4363-a257-a91af6bdd4e7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cdd1f39f-e464-499d-8f7e-5cb6a885e32f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9520662-2e3a-472e-a9a7-4d15c5cbea70"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use left hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d787c0e-295b-4d3f-837e-f45c0bf3dc40"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use right hand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a4c5071-6359-4536-8d78-cad8506946d5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bce5a59-43c4-4a58-92c4-f0d37529125b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pick up right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3555acf-80e3-4947-b1cb-d41dc92c2470"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""In game talking"",
            ""id"": ""e0934669-687b-4926-8a94-323021e0f2b5"",
            ""actions"": [
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5419faff-0705-43de-ac8a-e7b2f10965cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Send message"",
                    ""type"": ""Button"",
                    ""id"": ""e36312e7-d5e0-4fd6-a126-045a13c51c5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d5cde95-5fa4-4555-9d43-acaa29351086"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afcc7ec3-5635-4c29-a334-eeb0fa78a5dd"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Send message"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // In game
        m_Ingame = asset.FindActionMap("In game", throwIfNotFound: true);
        m_Ingame_Move = m_Ingame.FindAction("Move", throwIfNotFound: true);
        m_Ingame_Jump = m_Ingame.FindAction("Jump", throwIfNotFound: true);
        m_Ingame_Sprint = m_Ingame.FindAction("Sprint", throwIfNotFound: true);
        m_Ingame_Crouch = m_Ingame.FindAction("Crouch", throwIfNotFound: true);
        m_Ingame_Interact = m_Ingame.FindAction("Interact", throwIfNotFound: true);
        m_Ingame_Pickupleft = m_Ingame.FindAction("Pick up left", throwIfNotFound: true);
        m_Ingame_Pickupright = m_Ingame.FindAction("Pick up right", throwIfNotFound: true);
        m_Ingame_Dropleft = m_Ingame.FindAction("Drop left", throwIfNotFound: true);
        m_Ingame_Dropright = m_Ingame.FindAction("Drop right", throwIfNotFound: true);
        m_Ingame_Uselefthand = m_Ingame.FindAction("Use left hand", throwIfNotFound: true);
        m_Ingame_Userighthand = m_Ingame.FindAction("Use right hand", throwIfNotFound: true);
        m_Ingame_Menu = m_Ingame.FindAction("Menu", throwIfNotFound: true);
        // In game talking
        m_Ingametalking = asset.FindActionMap("In game talking", throwIfNotFound: true);
        m_Ingametalking_Cancel = m_Ingametalking.FindAction("Cancel", throwIfNotFound: true);
        m_Ingametalking_Sendmessage = m_Ingametalking.FindAction("Send message", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In game
    private readonly InputActionMap m_Ingame;
    private List<IIngameActions> m_IngameActionsCallbackInterfaces = new List<IIngameActions>();
    private readonly InputAction m_Ingame_Move;
    private readonly InputAction m_Ingame_Jump;
    private readonly InputAction m_Ingame_Sprint;
    private readonly InputAction m_Ingame_Crouch;
    private readonly InputAction m_Ingame_Interact;
    private readonly InputAction m_Ingame_Pickupleft;
    private readonly InputAction m_Ingame_Pickupright;
    private readonly InputAction m_Ingame_Dropleft;
    private readonly InputAction m_Ingame_Dropright;
    private readonly InputAction m_Ingame_Uselefthand;
    private readonly InputAction m_Ingame_Userighthand;
    private readonly InputAction m_Ingame_Menu;
    public struct IngameActions
    {
        private @Inputs m_Wrapper;
        public IngameActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Ingame_Move;
        public InputAction @Jump => m_Wrapper.m_Ingame_Jump;
        public InputAction @Sprint => m_Wrapper.m_Ingame_Sprint;
        public InputAction @Crouch => m_Wrapper.m_Ingame_Crouch;
        public InputAction @Interact => m_Wrapper.m_Ingame_Interact;
        public InputAction @Pickupleft => m_Wrapper.m_Ingame_Pickupleft;
        public InputAction @Pickupright => m_Wrapper.m_Ingame_Pickupright;
        public InputAction @Dropleft => m_Wrapper.m_Ingame_Dropleft;
        public InputAction @Dropright => m_Wrapper.m_Ingame_Dropright;
        public InputAction @Uselefthand => m_Wrapper.m_Ingame_Uselefthand;
        public InputAction @Userighthand => m_Wrapper.m_Ingame_Userighthand;
        public InputAction @Menu => m_Wrapper.m_Ingame_Menu;
        public InputActionMap Get() { return m_Wrapper.m_Ingame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngameActions set) { return set.Get(); }
        public void AddCallbacks(IIngameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pickupleft.started += instance.OnPickupleft;
            @Pickupleft.performed += instance.OnPickupleft;
            @Pickupleft.canceled += instance.OnPickupleft;
            @Pickupright.started += instance.OnPickupright;
            @Pickupright.performed += instance.OnPickupright;
            @Pickupright.canceled += instance.OnPickupright;
            @Dropleft.started += instance.OnDropleft;
            @Dropleft.performed += instance.OnDropleft;
            @Dropleft.canceled += instance.OnDropleft;
            @Dropright.started += instance.OnDropright;
            @Dropright.performed += instance.OnDropright;
            @Dropright.canceled += instance.OnDropright;
            @Uselefthand.started += instance.OnUselefthand;
            @Uselefthand.performed += instance.OnUselefthand;
            @Uselefthand.canceled += instance.OnUselefthand;
            @Userighthand.started += instance.OnUserighthand;
            @Userighthand.performed += instance.OnUserighthand;
            @Userighthand.canceled += instance.OnUserighthand;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
        }

        private void UnregisterCallbacks(IIngameActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pickupleft.started -= instance.OnPickupleft;
            @Pickupleft.performed -= instance.OnPickupleft;
            @Pickupleft.canceled -= instance.OnPickupleft;
            @Pickupright.started -= instance.OnPickupright;
            @Pickupright.performed -= instance.OnPickupright;
            @Pickupright.canceled -= instance.OnPickupright;
            @Dropleft.started -= instance.OnDropleft;
            @Dropleft.performed -= instance.OnDropleft;
            @Dropleft.canceled -= instance.OnDropleft;
            @Dropright.started -= instance.OnDropright;
            @Dropright.performed -= instance.OnDropright;
            @Dropright.canceled -= instance.OnDropright;
            @Uselefthand.started -= instance.OnUselefthand;
            @Uselefthand.performed -= instance.OnUselefthand;
            @Uselefthand.canceled -= instance.OnUselefthand;
            @Userighthand.started -= instance.OnUserighthand;
            @Userighthand.performed -= instance.OnUserighthand;
            @Userighthand.canceled -= instance.OnUserighthand;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
        }

        public void RemoveCallbacks(IIngameActions instance)
        {
            if (m_Wrapper.m_IngameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngameActions @Ingame => new IngameActions(this);

    // In game talking
    private readonly InputActionMap m_Ingametalking;
    private List<IIngametalkingActions> m_IngametalkingActionsCallbackInterfaces = new List<IIngametalkingActions>();
    private readonly InputAction m_Ingametalking_Cancel;
    private readonly InputAction m_Ingametalking_Sendmessage;
    public struct IngametalkingActions
    {
        private @Inputs m_Wrapper;
        public IngametalkingActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Cancel => m_Wrapper.m_Ingametalking_Cancel;
        public InputAction @Sendmessage => m_Wrapper.m_Ingametalking_Sendmessage;
        public InputActionMap Get() { return m_Wrapper.m_Ingametalking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(IngametalkingActions set) { return set.Get(); }
        public void AddCallbacks(IIngametalkingActions instance)
        {
            if (instance == null || m_Wrapper.m_IngametalkingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngametalkingActionsCallbackInterfaces.Add(instance);
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
            @Sendmessage.started += instance.OnSendmessage;
            @Sendmessage.performed += instance.OnSendmessage;
            @Sendmessage.canceled += instance.OnSendmessage;
        }

        private void UnregisterCallbacks(IIngametalkingActions instance)
        {
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
            @Sendmessage.started -= instance.OnSendmessage;
            @Sendmessage.performed -= instance.OnSendmessage;
            @Sendmessage.canceled -= instance.OnSendmessage;
        }

        public void RemoveCallbacks(IIngametalkingActions instance)
        {
            if (m_Wrapper.m_IngametalkingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IIngametalkingActions instance)
        {
            foreach (var item in m_Wrapper.m_IngametalkingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngametalkingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public IngametalkingActions @Ingametalking => new IngametalkingActions(this);
    public interface IIngameActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPickupleft(InputAction.CallbackContext context);
        void OnPickupright(InputAction.CallbackContext context);
        void OnDropleft(InputAction.CallbackContext context);
        void OnDropright(InputAction.CallbackContext context);
        void OnUselefthand(InputAction.CallbackContext context);
        void OnUserighthand(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
    }
    public interface IIngametalkingActions
    {
        void OnCancel(InputAction.CallbackContext context);
        void OnSendmessage(InputAction.CallbackContext context);
    }
}
